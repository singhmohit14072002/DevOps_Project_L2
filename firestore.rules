rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Check if incoming data has at least these fields
    function hasFields(fields) {
      return request.resource.data.keys().hasAll(fields);
    }

    // Check if incoming data has *only* these fields (useful for updates)
    function hasOnlyFields(fields) {
      return request.resource.data.keys().hasOnly(fields);
    }

    // Check if specific fields are being updated (exist in diff)
    function updatingFields(fields) {
      return request.resource.data.diff(resource.data).affectedKeys().hasAny(fields);
    }

     // Check if *only* specific fields are being updated
    function updatingOnlyFields(fields) {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields);
    }

    // --- Rules for Users collection ('users') ---
    match /users/{userId} {
      // Allow reading user data (needed for follow/bookmark checks etc.)
      allow read: if true;

      // Allow user to create their own document with specific initial fields
      allow create: if isOwner(userId) &&
                      // Enforce required fields on creation
                      hasFields(['displayName', 'email', 'photoURL', 'following', 'bookmarkedPosts', 'readingHistory', 'createdAt']) &&
                      // Ensure arrays are initialized correctly
                      request.resource.data.following == [] &&
                      request.resource.data.bookmarkedPosts == [] &&
                      request.resource.data.readingHistory == [] &&
                      // Ensure server timestamp is used for createdAt
                      request.resource.data.createdAt == request.time;

      // Allow user to update only specific fields in their own document
      allow update: if isOwner(userId) &&
                      // Prevent changing critical fields like email or createdAt
                      request.resource.data.email == resource.data.email &&
                      // Allow updating only these specific profile/feature fields
                      updatingOnlyFields(['displayName', 'photoURL', 'handle', 'following', 'bookmarkedPosts', 'readingHistory']);

      // Disallow deleting user documents through the app
      allow delete: if false;
    }

    // --- Rules for the 'posts' collection ---
    match /posts/{postId} {
      // Anyone can read posts
      allow read: if true;

      // Only authenticated users can create posts, enforcing authorId and initial values
      allow create: if isOwner(request.resource.data.authorId) && // User must be the author specified in the post data
                      hasFields(['title', 'content', 'tags', 'authorId', 'authorName', 'createdAt', 'likes', 'views']) &&
                      // Basic data validation
                      request.resource.data.title is string && request.resource.data.title.size() > 0 &&
                      request.resource.data.content is string && request.resource.data.content.size() > 0 &&
                      request.resource.data.tags is list &&
                      request.resource.data.authorName is string &&
                      // Enforce initial values set by the code
                      request.resource.data.likes == 0 &&
                      request.resource.data.views == 0 &&
                      request.resource.data.createdAt == request.time; // Use server timestamp

      // Allow updates under specific conditions
      allow update: if isAuthenticated() &&
                      (
                        // Condition 1: Author updating allowed fields
                        ( isOwner(resource.data.authorId) && // Must be the original author
                          request.resource.data.authorId == resource.data.authorId && // Author ID cannot be changed
                          updatingOnlyFields(['title', 'content', 'tags', 'lastEdited']) && // Only allow these fields to be updated by author
                          request.resource.data.lastEdited == request.time // Ensure server timestamp for edits
                        )
                        ||
                        // Condition 2: Any authenticated user updating like/view counts
                        ( updatingOnlyFields(['likes', 'likedBy', 'views'])
                          // Optional: Add stricter checks on increments if needed
                          // && (request.resource.data.likes == resource.data.likes + 1 || request.resource.data.likes == resource.data.likes - 1) ...
                          // && request.resource.data.views == resource.data.views + 1 ...
                        )
                      );

      // Only the author can delete their post
      allow delete: if isOwner(resource.data.authorId);

      // --- Rules for the 'comments' subcollection ---
      match /comments/{commentId} {
        // Anyone can read comments
        allow read: if true;

        // Only authenticated users can create comments, enforcing authorId
        allow create: if isOwner(request.resource.data.authorId) &&
                        hasFields(['content', 'authorId', 'authorName', 'createdAt']) &&
                        request.resource.data.content is string && request.resource.data.content.size() > 0 &&
                        request.resource.data.authorName is string &&
                        request.resource.data.createdAt == request.time;

        // Only the author can update (e.g., content) or delete their comment
        allow update: if isOwner(resource.data.authorId) &&
                        request.resource.data.authorId == resource.data.authorId && // Ensure author doesn't change
                        updatingOnlyFields(['content']); // Assuming only content is editable

        allow delete: if isOwner(resource.data.authorId);
      }
    }

    // --- Rules for the 'drafts' collection ---
    match /drafts/{draftId} {
       // Only the author can read their drafts
       allow read: if isOwner(resource.data.authorId);

       // Only the author can create drafts, enforcing authorId
       allow create: if isOwner(request.resource.data.authorId) &&
                       hasFields(['authorId', 'createdAt']) && // Enforce required fields
                       // Add checks for title/content/tags types if they are always present on create
                       request.resource.data.createdAt == request.time;

       // Disallow direct updates to drafts (code publishes to 'posts' then deletes draft)
       allow update: if false;
       // Example if update was needed:
       // allow update: if isOwner(resource.data.authorId) &&
       //                 request.resource.data.authorId == resource.data.authorId && // Prevent changing author
       //                 updatingOnlyFields(['title', 'content', 'tags']); // Allow updating specific fields

       // Only the author can delete drafts
       allow delete: if isOwner(resource.data.authorId);
    }
  }
} 